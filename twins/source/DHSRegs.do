/* DHSRegs.do v3.27              damiancclarke             yyyy-mm-dd:2013-04-15
*---|---------|---------|------  soniabhalotra  ------|---------|---------|----*
*---|----1----|----2----|----3----|----4----|----5----|----6----|----7----|----8

This file contains all summary statistics, figures, regressions and bounds tests
presented in the Twin Instrument paper.  Full details regarding creating this pa
per from source including downloading and merging DHS, creating crude data and f
ormatting tables can be found in the README file located in this directory.

This do file uses as input the data file DHS_Twins, which is generated by the fi
le DHSPrep.do. Currently it includes all DHS files available up until October 20
13. To replicate results exactly no DHS files released after 2013 should be incl
uded.

This file requires a number of user written ados which can be installed from the
SSC. These are ivreg2, outreg2, estout, ranktest, mat2txt and plausexog. This is
automated in lines 46-49.  The file can be completely controlled in Section (0).
Here directory locations are defined as global' variables, and, if desired, swit
ches can be set to determine which sections of the file to run. Note that runnin
g the entire file can take some time. On a machine with 16GB of virtual memory t
he run-time is ~30 hours.  The time to run individual sections is considerably s
horter.

For optimal viewing set tab width equal to 2 in text editor.

Questions should be directed to damian.clarke@economics.ox.ac.uk.



Last edit:
* Jul 22nd, 2014: Adding MMR test
* Jul 15th, 2014: Overidentification test
* Jul 14th, 2014: Alternative health var (height only)
* May 29th, 2014: instrumenting for desired fertility
* May 10th, 2014: testing for 35+ as well.
* December 17th, 2013: considerable rewrite based on comments in 22 Nov email.
  Can revert by going back to git commit Nov 11 2013.
* September 12th, 2013: Address Paul Dev's comment about treatment
* August 5th, 2013: Update figures and tables based on Sonia's comments on
early draft.
*/


clear all
version 11.2
set more off
cap log close
set matsize 2000


*******************************************************************************
*** (-1) Required ados from the SSC
*******************************************************************************
foreach ado in ivreg2 outreg2 estout ranktest mat2txt plausexog arrowplot /*
*/ psacalc leebounds {
    cap which `ado'
    if _rc!=0 ssc install `ado'
}

*******************************************************************************
*** (0) Globals and Locals
*******************************************************************************
* DIRECTORIES
global Data    "./twins/data/DHS"
global Source  "./twins/source"
global Log     "./twins/log"
global Figs    "./twins/figures"
global Tables  "./twins/results/DHS"

cap mkdir "$Tables"
foreach dirname in Summary Twin OLS IV Conley MMR {
	cap mkdir "$Tables/`dirname'"
}
log using "$Log/DHSRegs.txt", text replace



* VARIABLES
global outcomes school_zscore
global sumstatsM fert idealnumkids agemay educf height bmi underweight exceedfam
global sumstatsC educ school_zscore noeduc
global sumstatsF infantmortality childmortality
global twinpred motherage motheragesq agefirstbirth educf educfyrs_sq
global twinpredict $twinpred height bmi i.child_yob i._cou 
global twinout motherage motheragesq agefirstbirth educf educfyrs_sq height bmi
global base malec i._cou i.year_birth i.age i.contracep_intent 
global age motherage motheragesq motheragecub agefirstbirth 
global S educf educfyrs_sq
global H height bmi 
global HP height bmi prenateCluster
global bal1 fert idealnumkids agefirstbirth educf educp height underweight
global balance $bal1 prenate* motherage childmortality infantmortal 

* ECONOMETRIC SPECIFICATIONS
local se   cluster(id)
local wt   [pw=sweight]
local cond if age<19

* FILE SPECIFICATIONS
local gplus two three four


* FILE NAMES
local Sum      Summary
local SumC     SummaryChild
local SumF     SummaryMortality
local SumBord  Summary_Birthorder
local IVt      Base_IV_twins
local IVt1     Base_IV_twins_firststage

* REPEATED OPTIONS
#delimit ;
local estopt cells(b(star fmt(%-9.3f)) se(fmt(%-9.3f) par))
   stats (r2 N, fmt(%9.2f %9.0g)) starlevel ("*" 0.10 "**" 0.05 "***" 0.01);
local varlab varlabels(agemay "Mother's age" magesq "Mother's Age Squared"
      agefirstbirth "Age First Birth" educf "Mother's Education" educfyrs_sq
      "Mother's Education Squared" height "Height" bmi "BMI");
local varlab varlabels(agemay "Mother's age" magesq "Mother's Age Squared"
      agefirstbirth "Age First Birth" educf "Mother's Education" educfyrs_sq
      "Mother's Education Squared" height "Height");

local conditions
  ALL==1
  gender=="F"
  gender=="M"
  income=="low"
  income=="mid"
;

local fnames
  All
  Girls
  Boys
  LowIncome
  MidIncome
;
#delimit cr

*******************************************************************************
*** (1) Setup (+ FE generation)
*******************************************************************************
use "$Data/DHS_twins", clear

tab _cou, gen(_country)
tab year_birth, gen(_yb)
tab age, gen(_age)
tab contracep_intent, gen(_contracep)
tab bord, gen(_bord)
local base malec _country* _yb* _age* _contracep* `add'



*******************************************************************************
*** (1b) Check match rates
*******************************************************************************
egen touse=rowmiss(fert idealnumkids agemay educf height bmi underweight)
replace touse=. if touse!=0
replace touse=1 if touse==0
count if touse==1
count if _merge==3&touse==1
local totmatch=r(N)
count if _merge==3&age<=18&touse==1
local match18=r(N)
dis "Percent of matched offspring under 18: `match18'/`totmatch'"
count if _merge==2&touse==1
local totnonmatch=r(N)
count if _merge==2&(age>18|childageatdeath!=.)&touse==1
local nonmatch18=r(N)
dis "Percent of non-matched offspring 18+/deceased: `nonmatch18'/`totnonmatch'"

gen matched=1 if _merge==3&age<=18&touse==1
replace matched=0 if _merge==2&age<=18&childageatdeath==.&touse==1

foreach var of varlist age child_yob educf height bmi agemay twin malec {
		ttest `var', by(matched)
}


*******************************************************************************
*** (1c) Sample sizes
*******************************************************************************
bys id: gen NN=_n
gen allsample   =1 `cond' & nonmiss==0
gen hhsample    =1 `cond' & nonmiss==0 & _merge==3
gen twopsample  =1 `cond' & nonmiss==0 & _merge==3 & two_plus==1   & age>=6
gen threepsample=1 `cond' & nonmiss==0 & _merge==3 & three_plus==1 & age>=6
gen fourpsample =1 `cond' & nonmiss==0 & _merge==3 & four_plus==1  & age>=6
gen fivepsample =1 `cond' & nonmiss==0 & _merge==3 & five_plus==1  & age>=6

file open sfile using "$Tables/Summary/Samples.txt", write replace
file write sfile "Sample&N Children&N Mothers&Mean Age&Min Age&Max Age" _n

	
foreach samp of varlist allsam hhsam twopsam threepsam fourpsam fivepsam {
		count if `samp'==1
		local kcount="`: display %9.0fc r(N)'"
		
		count if `samp'==1 & NN==1
		local mcount="`: display %9.0fc r(N)'"

		sum age if `samp'==1
		scalar am = "`: display %7.4f r(mean)'"
		scalar ami = "`: display %7.1f r(min)'"
		scalar ama = "`: display %7.1f r(max)'"
		
		file write sfile "`samp'&`kcount'&`mcount'"
		file write sfile "&`=scalar(am)'&`=scalar(ami)'&`=scalar(ama)'" _n		
}

file close sfile

keep if _merge==3
drop allsamp hhsamp twopsamp threepsamp fourpsamp fivepsamp NN


*******************************************************************************
*** (2a) Summary Stats: Tables
*******************************************************************************
local opts       cells("count mean sd min max")
local sep        "&"		
local numkids    "Number of Children (Education)"
local numkidsF   "Number of Children (Ever Born)"
local nummothers "Number of Mothers"
local ncou       "Number of Countries &"

foreach num of numlist 1(1)4 {
		cap drop count 
		gen count = 1 `cond' & nonmiss==0
		replace count=. if catnum!=`num'
		foreach var of local sumstatsC {
        replace count=. if `var'==.
		}
		count if count==1 
		local kk = "`: display %9.0fc r(N)'"
    
		local numkids "`numkids' `sep'" "`kk'"

		bys id: gen n=_n
		count if count==1&n==1
		local mm = "`: display %9.0fc r(N)'"
		local nummothers "`nummothers' `sep'" "`mm'"
		drop n
    
}

levelsof _cou if income=="low"
local lincc: word count `r(levels)'
levelsof _cou if income=="mid"
local mincc: word count `r(levels)'
levelsof _cou
local aincc: word count `r(levels)'	
local numcountry "`ncou' `lincc'`sep'`lincc'`sep'`mincc'`sep'`mincc'`sep'`aincc'"

count `cond' & nonmiss==0
local kidcount = "`: display %9.0fc r(N)'"
sum twind
scalar at = "`: display %7.4f r(mean)'"
scalar as = "`: display %7.4f r(sd)'"	
sum twind if inc_status=="L"
scalar lt = "`: display %7.4f r(mean)'"
scalar ls = "`: display %7.4f r(sd)'"
sum twind if inc_status!="L"
scalar mt = "`: display %7.4f r(mean)'"
scalar ms = "`: display %7.4f r(sd)'"

sum bord if twind==1
scalar abm = "`: display %7.3f r(mean)'"
scalar abs = "`: display %7.3f r(sd)'"
sum bord if twind==1 & inc_status=="L"
scalar lbm = "`: display %7.3f r(mean)'"
scalar lbs = "`: display %7.3f r(sd)'"
sum bord if twind==1 &  inc_status!="L"
scalar mbm = "`: display %7.3f r(mean)'"
scalar mbs = "`: display %7.3f r(sd)'"


preserve
gen exceedfam=idealfam==1
keep `cond'&nonmiss==0
collapse $sumstatsM, by(id cat)
count
local mothercount = "`: display %9.0fc r(N)'"

estpost tabstat $sumstatsM, by(cat) statistics(mean sd) listwise ///
columns(statistics)
esttab using "$Tables/Summary/`Sum'.txt", replace main(mean) aux(sd) /*
*/ nostar unstack noobs nonote nomtitle nonumber
restore

estpost tabstat $sumstatsC, by(cat) statistics(mean sd) listwise ///
    columns(statistics)
esttab using "$Tables/Summary/`SumC'.txt", replace main(mean) aux(sd) /*
*/ nostar unstack noobs nonote nomtitle nonumber
	
preserve
use "$Data/DHS_twins.dta", clear
keep `cond'
estpost tabstat $sumstatsF, by(cate) statistics(mean sd) listwise ///
    columns(statistics)
esttab using "$Tables/Summary/`SumF'.txt", replace main(mean) aux(sd) /*
*/ nostar unstack noobs nonote nomtitle nonumber

foreach num of numlist 1(1)4 {
		cap drop count
		gen count = 1 `cond' & nonmiss==0

		replace count=. if catnum!=`num'
		foreach var of local sumstatsF {
        replace count=. if `var'==.
		}
		count if count==1
		local kk = "`: display %9.0fc r(N)'"

		local numkidsF "`numkidsF' `sep'" "`kk'"
}
count `cond' & nonmiss==0
local kidcountF = "`: display %9.0fc r(N)'"
	
clear
restore


file open resfile using "$Tables/Summary/Count.txt", write replace
file write resfile "`numcountry' \\" _n
file write resfile "`nummothers' & `mothercount' \\" _n
file write resfile "`numkids' & `kidcount' \\" _n
file write resfile "`numkidsF' & `kidcountF' \\" _n
	
file write resfile "Fraction Twin & \multicolumn{2}{c}{ `=scalar(lt)'" ///
	  "}& \multicolumn{2}{c}{ `=scalar(mt)' } & `=scalar(at)'\\" _n
file write resfile "& \multicolumn{2}{c}{(`=scalar(ls)')" ///
	  "}& \multicolumn{2}{c}{(`=scalar(ms)')} & (`=scalar(as)')\\" _n
file write resfile "Birth Order Twin & \multicolumn{2}{c}{ `=scalar(lbm)'" ///
	  "}& \multicolumn{2}{c}{ `=scalar(mbm)' }& `=scalar(abm)'\\" _n
file write resfile "& \multicolumn{2}{c}{(`=scalar(lbs)')" ///
	  "}& \multicolumn{2}{c}{(`=scalar(mbs)')}& (`=scalar(abs)')\\" _n
file write resfile "`mothercount'"
file close resfile


gen lowheight=height<157.48
replace lowheight=. if height==.
gen lowweight=bmi<18.5
replace lowweight=. if bmi==.
	
estpost tab lowheight `cond'
esttab using "$Tables/Summary/Health.xls", cells("b pct") replace
estpost tab lowweight `cond'
esttab using "$Tables/Summary/Health.xls", cells("b pct") append


/*
	preserve
	cap decode _cou, gen(WBcountry)
	gen colvar=inc_status=="L"
	collapse colvar, by(WBcountry _year)
	gen income="Low" if colvar==1
	replace income="Middle" if colvar==0
	drop colvar
	order WBcountry income _year
	sort WBc _year
	outsheet using "$Tables/Summary/Countries.csv", delimit(;) nonames replace
	restore
	*/

*******************************************************************************
*** (2b) Summary Stats: Graphical
*******************************************************************************
#delimit ;
twoway kdensity fert if twinfamily>0&twinfamily!=., lpattern(dash) bw(2) ||
	  kdensity fert if twinfamily==0, bw(2) scheme(s1color) ytitle("Density")   
legend(label(1 "Twin Family") label(2 "Singleton Family"))               
xtitle("total children ever born"); 
graph export "$Figs/famsize.eps", as(eps) replace;
#delimit cr
	
sum twind
local twinave=r(mean)	
preserve
collapse twind [pw=sweight], by(bord)
gen twinave=`twinave'	
line twind bord if bord<11, lpattern(dash) ytitle("Fraction twins") ///
    xtitle("Birth Order") yline(0.0185) scheme(s1color)
graph export "$Figs/twinbybord.eps", as(eps) replace
restore

preserve
keep `cond'
bys id: gen keepcrit=_n
keep if keepcrit==1
collapse educf `w', by(year_birth)
sort year_birth
twoway line educf year_birth if year_birth>=1940&year_birth<1997, /* 
*/ scheme(s1color) xtitle("DHS Birth Cohort") ytitle("Years of Education")
graph export "$Figs/eductrend_all.eps", as(eps) replace
restore

preserve
keep `cond'&agemay>35
bys id: gen keepcrit=_n
keep if keepcrit==1
collapse fert idealnumkids `w', by(year_birth)
sort year_birth
twoway line fert year_bi, lpattern(dash) || line idealnumkids year_birth, /*
*/ scheme(s1color) legend(label(1 "Fertility per Woman") /*
*/ label(2 "Desired Fertility")) ytitle("Births per Woman")
graph export "$Figs/ferttrend_35_all.eps", as(eps) replace
restore

#delimit ;
arrowplot twind height, groupvar(country) linesize(0.0025) regopts(`se') 
controls(motherage motheragesq agefirstbirth educf educfyrs_sq _yb*)
scheme(s1color) generate(hArrow) groupname(Country) ytitle("Frequency Twin")
xtitle("Mother's Height (cm)");
graph export "$Figs/height_country.eps", as(eps) replace;
#delimit cr

preserve
gen size=m18 if m18<=5
gen yestwin=1 if twind==1
gen notwin=1 if twind==0
collapse (sum) yestwin notwin, by(size)
drop if size==.
replace size=9 if size==1
replace size=8 if size==2
replace size=7 if size==3
replace size=6 if size==4
replace size=size-4
label def sizes 1 "Very Small" 2 "Small" 3 "Average" 4 "Large" 5 "Very Large"
label values size sizes
sum yestwin
replace yestwin=yestwin/(5*r(mean))
sum notwin
replace notwin=notwin/(5*r(mean))

#delimit ;
graph bar notwin yestwin, over(size) bargap(-20) ytitle("Proportion of Children") 
legend( label(1 "Singletons") label(2 "Twins") ) title("Reported Child Size")
blabel(bar, position(inside) format(%9.2f) color(white)) scheme(s1color)
subtitle("Twins and Non-twins");
#delimit cr
graph export "$Figs/Size.eps", as(eps) replace
restore

********************************************************************************
**** (3a) Twin predict regressions
********************************************************************************
fvset base 1 _cou
fvset base 1 child_yob

reg twind100 $twinpred height bmi i.child_yob i._cou `wt' `cond', `se'
outreg2 $twinout using "$Tables/Twin/healthTest.xls", replace
reg twind100 $twinpred i.child_yob i._cou `wt' `cond'&e(sample)==1, `se'
outreg2 $twinout using "$Tables/Twin/healthTest.xls", append

local cond1 child_yob>1989
local cond2 child_yob<=1989
local out   "$Tables/Twin/Twin_Predict.xls"
	

eststo: reg twind100 $twinpredict `wt' `cond', `se'
foreach inc in =="L" !="L"  {
		eststo: reg twind100 $twinpredict `wt' `cond'&inc_status`inc', `se'
}
foreach condtn in cond1 cond2 {
		eststo: reg twind100 $twinpredict `wt' `cond'&``condtn'', `se'
}
eststo: reg twind100 $twinpredict prenate* `wt', `se'

estout est1 est2 est3 est4 est5 est6 using `out', keep($twinout pre*)   ///
    title("Probability of Giving Birth to Twins (DHS)")                 ///
    varlabels(motherage "Age" motheragesq "Age Squared"  agefirstbirth  ///
    "Age First Birth" educf "Education (years)" educfyrs_sq             ///
	  "Education squared" height "Height" bmi "BMI") `estopt' replace     ///
	  note("Notes: All specifications include a full set of year of birth"///
	  " and country dummies, and are estimated as linear probability  "   ///
	  " models. Twin is multiplied by 100 for presentation.  Height is "  ///
	  " measured in cm and BMI is weight in kg divided by height in "     ///
	  "metres squared. Prenatal care variables are only recoreded for "   ///
	  "recent births.  As such, column (6) is estimated only for that "   ///
	  "subset of births where these observations are made.")
estimates clear
/*
*******************************************************************************
**** (3b) Probit
*******************************************************************************
local out "$Tables/Twin/Twin_PredictProbit.xls"
 
foreach var of varlist $twinout pre* {
    replace `var'=`var'/100
}
probit twind $twinpredict `wt' `cond', `se'
estpost margins, dydx($twinout)
estimates store est1

local jj = 2
foreach inc in =="L" !="L"  {
		probit twind $twinpredict `wt' `cond'&inc_status`inc', `se'
    estpost margins, dydx($twinout)
    estimates store est`jj'
    local ++jj
}
foreach condtn in cond1 cond2 {
		probit twind $twinpredict `wt' `cond'&``condtn'', `se'
    estpost margins, dydx($twinout)
    estimates store est`jj'
    local ++jj
}
 probit twind $twinpredict prenate* `wt', `se'
estpost margins, dydx($twinout prenate_doc prenate_nurse prenate_none)
estimates store est6

estout est1 est2 est3 est4 est5 est6 using `out', keep($twinout pre*)    ///
	  title("Probability of Giving Birth to Twins (DHS, Probit)")          ///
	  varlabels(motherage "Age" motheragesq "Age Squared"  agefirstbirth   ///
	  "Age First Birth" educf "Education (years)" educfyrs_sq              ///
	  "Education squared" height "Height" bmi "BMI") `estopt' replace      ///
	  note("Notes: All specifications include a full set of year of birth" ///
	  " and country dummies, and are estimated as probit models. Marginal" ///
	  " effects at the mean are reported.  Margins are multiplied by 100 " ///
    "for presentation.  Height is"                                       ///
	  " measured in cm and BMI is weight in kg divided by height in "      ///
	  "metres squared. Prenatal care variables are only recoreded for "    ///
	  "recent births.  As such, column (6) is estimated only for that "    ///
	  "subset of births where these observations are made.")
estimates clear
foreach var of varlist $twinout pre* {
    replace `var'=`var'*100
}
*/
********************************************************************************
**** (4) IMR Test
********************************************************************************
preserve
use "$Data/DHS_twins", clear
	
gen tta=age if twind==1
bys id: egen twinage=min(tta)
gen twinagedif=twinage-age
	
gen treated=twinfamily>=1&twinagedif>1&twinagedif!=.
replace treated=. if twinfamily>=1&twinagedif<1
tab treated

local n1=1
local n2=2
local n3=3
local estimates

replace infantmortality=infantmortality*100
foreach n in `gplus' {
		local c  `cond'&`n'_plus==1
		local ce `cond'&`n'_plus==1&e(sample)
 		eststo: reg infantmortality `base' $age $S $H treated `wt' `c' , `se'
		eststo: reg infantmortality `base' $age $S    treated `wt' `ce', `se'
		eststo: reg infantmortality `base' $age       treated `wt' `ce', `se'

		local estimates `estimates' est`n3' est`n2' est`n1' 
		local n1=`n1'+3
		local n2=`n2'+3
		local n3=`n3'+3
}
	
local Iout "$Tables/Twins/PreTwinTest.xls"		
estout `estimates' using `Iout', replace keep(treated malec $age $S $H) `estopt'	
estimates clear

restore

********************************************************************************
**** (5) Simple OLS of Q-Q (can then apply Altonji)
********************************************************************************
local out "$Tables/OLS/QQ_ols.xls"
cap rm `out'
cap rm "$Tables/OLS/QQ_ols.txt"
7A	
gen desiredbirth=bord<=idealnumkids
gen fertXdesired=fert*desiredbirth

foreach inc in ALL==1 income=="low" income=="mid" {
		preserve
		keep `cond'&`inc'
		foreach y of varlist $outcomes {
        qui reg `y' fert `base' $age $S $H, `se'

        reg `y' fert `base' $age                    `wt' if e(sample), `se'
        outreg2 fert $age using `out', excel append
        reg `y' fert `base' $age    $H              `wt' if e(sample), `se'
        outreg2 fert $age $H using `out', excel append
        reg `y' fert `base' $age $S $H              `wt'             , `se'
        outreg2 fert $age $S $H using `out', excel append
        reg `y' fert `base' $age $S $H i.bord       `wt'             , `se'
        outreg2 fert $age $S $H using `out', excel append
        reg `y' fert `base' $age $S $H fertXdesired `wt'             , `se'
        outreg2 fert* $age $S $H using `out', excel append
		}
		restore
}

local out "$Tables/OLS/QQ_plusgroups.xls"
cap rm `out'
cap rm "$Tables/OLS/QQ_plusgroups.txt"

foreach n in `gplus' {
		preserve
		keep `cond'&`n'_plus==1			
		foreach y of varlist $outcomes {
        qui reg `y' fert `base' $age $S $HP, `se'

        reg `y' fert `base' $age        `wt' if e(sample), `se'
        outreg2 fert $age using `out', excel append
        reg `y' fert `base' $age $S     `wt' if e(sample), `se'
        outreg2 fert $age $S using `out', excel append
        reg `y' fert `base' $age $S $H  `wt'             , `se'
        outreg2 fert $age $S $H using `out', excel append
        reg `y' fert `base' $age $S $HP `wt'             , `se'
        outreg2 fert $age $S $HP using `out', excel append
		}
		restore
}

********************************************************************************
**** (6) IV (using twin at order n), subsequent inclusion of twin predictors
********************************************************************************
tokenize `fnames'
foreach condition of local conditions {
		local n1=1
		local n2=2
		local n3=3
		local n4=4
		local estimates
		local fstage

		local OUT "$Tables/IV/`1'"
    local ll=3
    
		foreach n in `gplus' {
        preserve
        keep `cond'&`condition'&`n'_plus==1

        foreach y in $outcomes {
            #delimit ;
            eststo: ivreg2 `y' `base' $age $S $HP (fert=twin_`n'_fam) `wt'
                                , `se' savefirst savefp(f`n4') partial(`base');
            eststo: ivreg2 `y' `base' $age $S $H  (fert=twin_`n'_fam) `wt'      
                                , `se' savefirst savefp(f`n3') partial(`base');
            eststo: ivreg2 `y' `base' $age    $H (fert=twin_`n'_fam)  `wt'
                    if e(sample), `se' savefirst savefp(f`n2') partial(`base');
            eststo: ivreg2 `y' `base' (fert=twin_`n'_fam) `wt' if e(sample), 
                    `se' savefirst savefp(f`n1') partial(`base');
            #delimit cr
            
            local estimates `estimates' est`n4' est`n3' est`n2' est`n1' 
            local fstage    `fstage'    f`n1'fert f`n2'fert f`n3'fert f`n4'fert
            local n1=`n1'+4
            local n2=`n2'+4
            local n3=`n3'+4
            local n4=`n4'+4				
        }
        restore
        local ++ll
		}
    #delimit ;
		estout `estimates' using "`OUT'.xls"      , replace `estopt' `varlab'
      keep(fert $age $S $H $HP);
		estout `fstage'    using "`OUT'_first.xls", replace `estopt' `varlab'
		  keep(twin_* $age $S $H $HP);
    #delimit cr

		estimates clear
		macro shift
}



********************************************************************************
**** (7) Conley et al approach
***  Here we are assuming that:
***     quality  = beta*quantity + gamma*twin + epsilon.
***     quantity = pi*twin + nu
***
***  Typical instrumental assumption is that gamma=0, but Conley et al relax
***  this so that gamma can be a small effect, or as they say, we have "prior
***  information that implies that gamma is near 0 but perhaps not exactly 0".
********************************************************************************
mat cbounds1 = J(3,4,.)
local ii = 1
foreach n in two three four {
		local c `cond'&`n'_plus==1
    preserve
    keep `c'

    qui reg school_zscore `base' $age
    predict Ey, resid
    qui reg fert          `base' $age
    predict Ex, resid
    qui reg twin_`n'_fam  `base' $age
    predict Ez, resid
    local ESH
    foreach var of varlist $S $H {
        qui reg `var' `base' $age
        predict E`var', resid
        local ESH `ESH' E`var'
    }
 
    *------    UCI     ---------------------------------------------------------
    plausexog uci school_zscore `base' $age $S $H (fert = twin_`n'_fam), /*
    */ gmin(0) gmax(0.0182) grid(2) level(.90) vce(robust)
    local c1 = e(lb_fert)
    local c2 = e(ub_fert)
    dis "lower bound = `c1', upper bound=`c2'"
    
    *------    LTZ     ---------------------------------------------------------
    local items = 6
		matrix omega_eta = J(`items',`items',0)
		matrix omega_eta[1,1] = 0.00265^2
		matrix mu_eta = J(`items',1,0)
		matrix mu_eta[1,1] = 0.0091448

    plausexog ltz Ey `ESH' (Ex = Ez), omega(omega_eta) mu(mu_eta)
    local c3 = _b[Ex]-1.65*_se[Ex]
    local c4 = _b[Ex]+1.65*_se[Ex]
    dis "lower bound = `c3', upper bound=`c4'"


    *------  GRAPHING   ---------------------------------------------------------
    foreach num of numlist 0(1)10 {
        matrix om`num'=J(`items', `items', 0)
        matrix om`num'[1,1] = ((`num'/10)*0.1/sqrt(12))^2
        matrix mu`num'=J(`items', 1, 0)
        matrix mu`num'[1,1]= (`num'/10)*0.1/2
        local d`num' = (`num'/10)*0.1
		}

    #delimit ;
		plausexog ltz Ey `ESH' (Ex = Ez), omega(omega_eta) mu(mu_eta) level(0.95)
    graph(Ex) graphomega(om0 om1 om2 om3 om4 om5 om6 om7 om8 om9 om10)
    graphmu(mu0 mu1 mu2 mu3 mu4 mu5 mu6 mu7 mu8 mu9 mu10)
    graphdelta(`d0' `d1' `d2' `d3' `d4' `d5' `d6' `d7' `d8' `d9' `d10');
		graph export "$Figs/Conley/LTZ_`n'.eps", as(eps) replace;
    #delimit cr

    restore
    
		mat cbounds1[`ii',1]=`=`c1''
		mat cbounds1[`ii',2]=`=`c2''
		mat cbounds1[`ii',3]=`=`c3''
		mat cbounds1[`ii',4]=`=`c4''
    
    local ++ii
}
mat colnames cbounds1 = LowerBound UpperBound LowerBound UpperBound
mat rownames cbounds1 = TwoPlus ThreePlus FourPlus
local Cout "$Tables/Conley/ConleyGamma.txt"
mat2txt, matrix(cbounds1) saving(`Cout') format(%6.4f) replace


********************************************************************************
**** (8) Twin treated versus untreated balance
********************************************************************************
estimates clear
do "$Source/myttests.ado"

gen Treated=1 if twinfamily>0&twinfamily!=.
replace Treated=0 if twinfamily==0
tab wealth, gen(_wealth)

collapse $balance _wealth* Treated, by(id)

lab var fert "Total Fertilty"
lab var idealnumkids "Desired Fertility"
lab var agefirstbirth "Age First Birth"
lab var educf "Mother's Education"
lab var educp "Father's Education"
lab var height "Mother's Height"
lab var underweight "Pr(BMI $<$ 18.5)"
lab var prenate_doc "Prenatal care (doctor)"
lab var prenate_nurse "Prenatal care (nurse)"		
lab var prenate_none "Prenatal care (none)"
lab var motherage "Mother's Age"
lab var _wealth1 "Wealth Quintile 1"
lab var _wealth2 "Wealth Quintile 2"
lab var _wealth3 "Wealth Quintile 3"
lab var _wealth4 "Wealth Quintile 4"
lab var _wealth5 "Wealth Quintile 5"
lab var childmortality "Child Mortality"
lab var infantmortality "Infant Mortality"		

		
myttests $balance _wealth*, by(Treated)
ereturn list

#delimit ;
esttab using "$Tables/Summary/Balance_mother.tex", nomtitle nonumbers noobs 
title(Test of Balance of Observables: Twins versus Non-twins \label{TWINtab:comp})
label cells("mu_1(fmt(a3)) mu_2 d(star pvalue(d_p))" " . . d_se(par)") replace
booktabs ;
#delimit cr


cap drop Treated
global balanceG educf height prenateCluster motherage agefirstbirth fert /*
*/ infantmortality educ school_zscore malec
	
foreach n in `gplus' {
		preserve
		keep `cond'&`n'_plus==1			
		gen Treated=twin_`n'_fam==1
    
		collapse $balanceG Treated, by(id)

		lab var fert "Total Fertilty"
		lab var agefirstbirth "Age First Birth"
		lab var educf "Mother's Education"
		lab var height "Mother's Height (cm)"
		lab var prenateCluster "Prenatal care available"
		lab var infantmortality "Infant Mortality (pre-twin)"
		lab var motherage "Mother's Age in Years"
		lab var educ "Child education (pre-twin children)"
		lab var school_zscore "School Z-score (pre-twin)"
		lab var malec "Percent male child (pre-twin)"

		myttests $balanceG, by(Treated)
		ereturn list

    #delimit ;
		esttab using "$Tables/Balance/Balance_`n'.tex", nomtitle nonumbers noobs
    title(Test of Balance of Observables: Twins versus Non-twins
          \label{TWINtab:comp}) label booktabs
		cells("mu_1(fmt(a3)) mu_2 d(star pvalue(d_p))" " . . d_se(par)") replace;
    #delimit cr
		
		restore
}



********************************************************************************
**** (9) MMR Tests
********************************************************************************
local outfile "$Tables/MMR/MMRTest"
cap rm "`outfile'.txt"
cap rm "`outfile'.xls"
cap rm "`outfile'.tex"

preserve
bys id: gen mothercount=_n
keep if mothercount==1
merge 1:1 id using "$Data/TwinsMMR", gen(_mergeMM)

gen anyMMR=numMaternalDeaths!=0
gen deathsperSister=numMaternalDeaths/numSisters
gen SMA2=SiblingMeanAge^2
gen SMA3=SiblingMeanAge^3
gen heightLess155=height<155.5

count
sum anyMMR height if heightLess155==1
sum anyMMR height if heightLess155==0	
	
foreach y of varlist anyMMR numMaternalDeaths deathsperSister {
		reg `y' numSister SiblingMeanAge SMA* `base' $age $S heightL `wt', robust
		outreg2 numSister SiblingMeanAge SMA* $age $S heightL                   /*
		        */ using "`outfile'.xls", excel append
		outreg2 numSister SiblingMeanAge SMA* $age $S heightL                   /*
            */ using "`outfile'.tex", tex(pretty) append
}




********************************************************************************
**** (10) Selection into twinning based on healthy survival
********************************************************************************
qui reg anyMMR $age `base'
predict concentratedMMR if e(sample), residuals

foreach num of numlist 1(1)4 {
    gen unhealthy`num' = height<(135+5*`num')|bmi<(15.5+0.5*`num')
    gen healthy`num'  = (unhealthy`num'-1)*-1
}

********************************************************************************
*** (10a) Lee Bounds
********************************************************************************
cap rm "$Tables/MMR/LeeBounds.txt"
local con if motherage>18&motherage<40&_mergeMM==3&agefirstbirth>15&agefirstbirth<40

gen twinfam100=100 if twinfamily==1|twinfamily==2
replace twinfam100=0 if twinfamily==0

local ti tight(motherage)
file open lee using "$Tables/MMR/LeeBounds.txt", write replace
foreach n of numlist 1(1)4 {
    leebounds twinfam100 healthy`n' `con' `wt', select(anyMMR) cie
    mat def est=e(b)
    mat def ser=e(V)
    mat2txt, matrix(est) saving("$Tables/MMR/LeeBounds.txt") append
    mat2txt, matrix(ser) saving("$Tables/MMR/LeeBounds.txt") append
}
drop twinfam100

********************************************************************************
*** (10b) Alderman-style bounds
********************************************************************************
local out "$Tables/MMR/Alderman.tex"

tab educf
gen twinfam100=100 if twinfamily==1|twinfamily==2
replace twinfam100=0 if twinfamily==0
reg twinfam100 $twinpredict `wt' `cond'
outreg2 mother* agefir educf* height bmi using `out', replace tex(pr)

foreach num of numlist 1(1)4 {
    sum deathsperSister if healthy`num'==1
    local healthexp   =round(`r(mean)'*`r(N)')
    dis `healthexp'
    sum deathsperSister if healthy`num'==0
    local unhealthexp =round(`r(mean)'*`r(N)')
    dis `unhealthexp'
    
    set seed 2203
    gen rnumb = runiform()
    sort healthy`num' rnumb
    bys healthy`num': gen counter=_n
    gen     repeat=1 if counter<=`healthexp'&healthy`num'==1
    replace repeat=1 if counter<=`unhealthexp'&healthy`num'==0
    
    expand 2 if repeat==1, gen(created)
    replace twinfam100 = 100 if created==1&healthy`num'==0
    replace twinfam100 = 0   if created==1&healthy`num'==1
    reg twinfam100 $twinpredict `wt' `cond'
    outreg2 mother* agefir educf* height bmi using `out', append tex(pr)
    
    drop if created==1
    drop rnumb repeat counter created
}

********************************************************************************
*** (10c) Graph of sister height and MMR
********************************************************************************
gen cut=.
local it=1
foreach cut of numlist 140 145 150 155 160 165 170 175 {
    replace cut=`it' if height<`cut'&cut==.
    local ++it
}
label def ht 1 "<140" 2 "145" 3 "150" 4 "155" 5 "160" 6 "165" 7 "170" 8 "175+"
label values cut ht

sum height, d
local mid = r(p50)
local psd = r(p50)+r(sd)
local msd = r(p50)-r(sd)
dis "`mid'"


local n1 "Each point represents the average per age group, "
local n2 "concentrating out country and age FEs."
local n3 "The vertical line represents that mean height of `mid'cm."
collapse concentratedMMR, by(cut)
#delimit ;
scatter concentratedMMR cut, xlabel(1 2 3 4 5 6 7 8, valuelabel)   
  note("`n1'`n2'" "`n3'") xtitle("Height (woman)") scheme(s1mono) 
  ytitle("Maternal Mortality (sisters)") xline(4.1, lpattern(solid));
graph export "$Figs/MMRcuts.eps", as(eps) replace
restore




********************************************************************************
**** (22) Clean up
********************************************************************************
log close
